"use strict";


(function (WorkoutsDetails, undefined) {
    // Handles functionality for /workouts/details view.
    // Example written using "traditional" javascript to demonstrate ability (no ES6).

    // Use when referring to workoutDetails internally.Set to 'this' in init;
    // prevents confusion in functions over what 'this' keyword refers to.
    var self = WorkoutsDetails;


    var config = {
        // Example for reference - these get overwritten anyway, in this situation
        // performance penalty is neglible enough that it's worth seeing them here.
        urls: {
            xslStylesheet: '',
            xmlDocument: ''
        },
        // Abstract to here for preparation of adding support for measuring in KGs
        // in the future.
        weightUnit: 'lbs'
    }


    self.init = function (urls) {
        // I'd usually use jQuery's $.extend method here to do config overriding,
        // but trying to stick to vanilla javascript for this example and don't
        // need to pass in many options. URLs do need to be passed in since they
        // are generated by the MVC framework, which can only generate the URLs
        // in views and not in JavaScript files.
        config.urls = urls;

        document.addEventListener('DOMContentLoaded', function (event) {
            console.debug('DOM content loaded.');

            self.renderWorkout();

            console.debug('Initialized workoutDetails.');
        });
    }


    self.calculateExerciseInstanceTotalWeight = function (exerciseInstance) {
        // Calculates the total weight (all sets * all reps) of an exercise instance in a workout.
        if (exerciseInstance == null) return 0;

        var exerciseSets, j, exerciseSet, weight, repetitions, runningTotalWeight = 0;

        exerciseSets = exerciseInstance.getElementsByClassName('exercise-set');

        for (j = 0; j < exerciseSets.length; j++) {
            exerciseSet = exerciseSets[j];

            console.debug('Set: '.concat(j));

            weight = exerciseSet.getElementsByClassName('weight')[0].textContent;
            console.debug('Weight: ['.concat(weight).concat(']'));

            repetitions = exerciseSet.getElementsByClassName('repetitions')[0].textContent;
            console.debug('Repetitions: ['.concat(repetitions).concat(']'));

            console.debug((parseInt(weight) * parseInt(repetitions)));

            runningTotalWeight += (parseInt(weight) * parseInt(repetitions));
            console.debug(runningTotalWeight);
        }

        return runningTotalWeight;
    }


    self.formatDisplayWeight = function (weight) {
        // parseInt to remove any trailing space or zeros if a string is passed in.
        var trimmedWeightString = '' + parseInt(weight);
        var formattedWeightString = trimmedWeightString.replace(/\B(?=(\d{3})+(?!\d))/g, ",");

        return formattedWeightString.concat(' ').concat(config.weightUnit);
    }


    self.renderWorkout = function () {
        // Handles everything needed to load and render the XML data file,
        // including post-render calculations.
        var docs = self.requestXmlAndXsl();

        var xsltProcessor = new XSLTProcessor();
        xsltProcessor.importStylesheet(docs.xsl);

        // Clear the target element's content just in case later we're 
        // adding something to this container, e.g a loader.
        // Normally the page is refreshed everytime so this 
        // would just empty an empty element.
        document.getElementById("workout").innerHTML = '';

        var fragment = xsltProcessor.transformToFragment(docs.xml, document);
        document.getElementById("workout").appendChild(fragment);

        self.renderTotalWeights();
    }


    self.renderTotalWeights = function () {
        // Render the calculated total weights for the workout and 
        // its exercise instances in the document's placholders.

        // Add up the weights multiplied by the reps to get the total weight
        // lifted in each exercise instance.
        var exercisesInstances = document.getElementsByClassName('exercise-instance');

        var i, j, exerciseInstance, exerciseInstanceTotalWeight, workoutTotalWeight, runningTotalWeight = 0, workoutTotalWeightPlaceholders;

        // Calculate the total weight for each exercise, update the exercise placeholder,
        // and aggregate these weights so we have a value for the workout's entire total weight.

        for (i = 0; i < exercisesInstances.length; i++) {
            exerciseInstance = exercisesInstances[i];

            exerciseInstanceTotalWeight = self.calculateExerciseInstanceTotalWeight(exerciseInstance);

            exerciseInstance.getElementsByClassName('exercise-set__total-weight')[0].textContent = self.formatDisplayWeight(exerciseInstanceTotalWeight);

            runningTotalWeight += exerciseInstanceTotalWeight;
        }

        // Update the workout total weight placeholders.

        workoutTotalWeightPlaceholders = document.getElementsByClassName('workout__total-weight');

        for (j = 0; j < workoutTotalWeightPlaceholders.length; j++) {
            workoutTotalWeightPlaceholders[j].textContent = self.formatDisplayWeight(runningTotalWeight);
        }
    }


    self.requestXmlAndXsl = function () {
        // Retrieve the XML and XSL documents from Azure and our server.
        var documents = {
            xml: undefined,
            xsl: undefined
        };

        var myXMLHTTPRequest = new XMLHttpRequest();

        // Azure blob storage doesn't return as application/xml, force it here.
        myXMLHTTPRequest.overrideMimeType('application/xml');
        myXMLHTTPRequest.open("GET", config.urls.xmlDocument, false);
        myXMLHTTPRequest.send(null);
        documents.xml = myXMLHTTPRequest.responseXML;

        // Get the XSL stylesheet.
        myXMLHTTPRequest.open("GET", config.urls.xslStylesheet, false);
        myXMLHTTPRequest.send(null);
        documents.xsl = myXMLHTTPRequest.responseXML;

        console.debug('Retrieved docs: ');
        console.debug(documents);

        return documents;
    }

}(window.WorkoutsDetails = window.WorkoutsDetails || {}));